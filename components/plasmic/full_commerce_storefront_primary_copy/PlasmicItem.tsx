// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7G8n9jwdE5WowDWbWsVZ26
// Component: 2qQl6qfDZ6I_26
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: bGODP7QmU1IFXw/component
import Button from "../../Button"; // plasmic-import: TeHqZuNjGboLlH/component
import { ProductBox } from "@plasmicpkgs/commerce"; // plasmic-import: 1gYJf_XBZUAD/codeComponent
import { ProductMedia } from "@plasmicpkgs/commerce"; // plasmic-import: qpULM0wwWW/codeComponent
import { ProductMediaCollection } from "@plasmicpkgs/commerce"; // plasmic-import: a5BakxYc5Db_/codeComponent
import { ProductTextField } from "@plasmicpkgs/commerce"; // plasmic-import: S1F4q0wN6b/codeComponent
import { ProductPriceComponent } from "@plasmicpkgs/commerce"; // plasmic-import: _PaJxGc8gf/codeComponent
import { ProductVariantPicker } from "@plasmicpkgs/commerce"; // plasmic-import: i3vHZr7erKX/codeComponent
import { ProductQuantity } from "@plasmicpkgs/commerce"; // plasmic-import: CjfQQrwiHjD/codeComponent
import TextInput from "../../TextInput"; // plasmic-import: ifpHUSs7fyJDus/component
import { AddToCartButton } from "@plasmicpkgs/commerce"; // plasmic-import: NR7KYUJmEqx/codeComponent
import Separator from "../../Separator"; // plasmic-import: LYa_YmrWl5odjn/component
import { ProductCollection } from "@plasmicpkgs/commerce"; // plasmic-import: vU2jzVAnFP/codeComponent
import ProductCard from "../../ProductCard"; // plasmic-import: r4g8NclKGXHCM0/component
import Rating from "../../Rating"; // plasmic-import: YwX3tQC_9DPMnH/component
import Footer from "../../Footer"; // plasmic-import: yupoJ9vNpJ7q5T/component

import { useScreenVariants as useScreenVariantswtJ2E0HlkJw0X } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: wtJ2E0HLK-JW0X/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_full_commerce_storefront_primary_copy.module.css"; // plasmic-import: 7G8n9jwdE5WowDWbWsVZ26/projectcss
import sty from "./PlasmicItem.module.css"; // plasmic-import: 2qQl6qfDZ6I_26/css

import HomeIcon from "./icons/PlasmicIcon__Home"; // plasmic-import: sXEgISZXILGkRM/icon
import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: 16E9ppEzL5I4sF/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: fOyy2pRghCwtrK/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: FNBxAcIPXrvYO8/icon
import LikeIcon from "./icons/PlasmicIcon__Like"; // plasmic-import: ZOqm2C9WDk14C1/icon
import RightArrowIcon from "./icons/PlasmicIcon__RightArrow"; // plasmic-import: RRZibRgeOCwXSy/icon

export type PlasmicItem__VariantMembers = {};

export type PlasmicItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicItem__VariantsArgs;
export const PlasmicItem__VariantProps = new Array<VariantPropType>();

export type PlasmicItem__ArgsType = {
  container42?: React.ReactNode;
};

type ArgPropType = keyof PlasmicItem__ArgsType;
export const PlasmicItem__ArgProps = new Array<ArgPropType>("container42");

export type PlasmicItem__OverridesType = {
  root?: p.Flex<"div">;
  navBar?: p.Flex<typeof NavBar>;
  container432?: p.Flex<"div">;
  productBox?: p.Flex<typeof ProductBox>;
  columns?: p.Flex<"div">;
  productMedia?: p.Flex<typeof ProductMedia>;
  productMediaCollection?: p.Flex<typeof ProductMediaCollection>;
  productPrice?: p.Flex<typeof ProductPriceComponent>;
  productVariantPicker?: p.Flex<typeof ProductVariantPicker>;
  productQuantity?: p.Flex<typeof ProductQuantity>;
  textInput?: p.Flex<typeof TextInput>;
  likeButton?: p.Flex<typeof Button>;
  separator?: p.Flex<typeof Separator>;
  container42?: p.Flex<"div">;
  container5?: p.Flex<"div">;
  productCollection?: p.Flex<typeof ProductCollection>;
  productCard?: p.Flex<typeof ProductCard>;
  footer?: p.Flex<typeof Footer>;
  textbox?: p.Flex<typeof TextInput>;
};

export interface DefaultItemProps {}

function PlasmicItem__RenderFunc(props: {
  variants: PlasmicItem__VariantsArgs;
  args: PlasmicItem__ArgsType;
  overrides: PlasmicItem__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswtJ2E0HlkJw0X()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"Item"}</title>
        <meta key="og:title" property="og:title" content={"Item"} />
        <meta
          key="description"
          property="og:description"
          name="description"
          content={
            "Nunc parturient ultricies condimentum parturient sagittis urna mus conubia himenaeos fermentum leo mus dignissim pulvinar blandit porta eget ad."
          }
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames("__wab_instance", sty.navBar)}
          />

          <section className={classNames(projectcss.all, sty.section__tsRgk)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"container432"}
              data-plasmic-override={overrides.container432}
              hasGap={true}
              className={classNames(projectcss.all, sty.container432)}
            >
              <Button
                startIcon={
                  <HomeIcon
                    className={classNames(projectcss.all, sty.svg__sj658)}
                    role={"img"}
                  />
                }
              >
                {"Mens"}
              </Button>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1GfyA
                )}
              >
                {"/"}
              </div>

              <Button
                startIcon={
                  <HomeIcon
                    className={classNames(projectcss.all, sty.svg__d8Dm3)}
                    role={"img"}
                  />
                }
              >
                {"Shoes"}
              </Button>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fmqT
                )}
              >
                {"/"}
              </div>

              <Button
                startIcon={
                  <HomeIcon
                    className={classNames(projectcss.all, sty.svg__khJdt)}
                    role={"img"}
                  />
                }
              >
                {"Running"}
              </Button>
            </p.Stack>
          </section>

          <ProductBox
            data-plasmic-name={"productBox"}
            data-plasmic-override={overrides.productBox}
            className={classNames("__wab_instance", sty.productBox)}
            id={"eternity-nitro-mens-running-shoes" as const}
          >
            <section className={classNames(projectcss.all, sty.section__wcbOu)}>
              <p.Stack
                as={"div"}
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__bpEv)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__aVgSe)}
                  >
                    <ProductMedia
                      data-plasmic-name={"productMedia"}
                      data-plasmic-override={overrides.productMedia}
                      className={classNames("__wab_instance", sty.productMedia)}
                    />

                    <ProductMediaCollection
                      data-plasmic-name={"productMediaCollection"}
                      data-plasmic-override={overrides.productMediaCollection}
                      className={classNames(
                        "__wab_instance",
                        sty.productMediaCollection
                      )}
                      media={
                        <ProductMedia
                          className={classNames(
                            "__wab_instance",
                            sty.productMedia__qgqsk
                          )}
                        />
                      }
                    />
                  </p.Stack>
                </div>

                <div className={classNames(projectcss.all, sty.column__h0Hbi)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__hRuAe)}
                  >
                    <ProductTextField
                      className={classNames(
                        "__wab_instance",
                        sty.productTextField__xx9Ql
                      )}
                      field={"name" as const}
                    />

                    <ProductPriceComponent
                      data-plasmic-name={"productPrice"}
                      data-plasmic-override={overrides.productPrice}
                      className={classNames("__wab_instance", sty.productPrice)}
                    />

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__akVs)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__blHZc
                        )}
                      >
                        {"Size"}
                      </div>

                      <ProductVariantPicker
                        data-plasmic-name={"productVariantPicker"}
                        data-plasmic-override={overrides.productVariantPicker}
                        className={classNames(
                          "__wab_instance",
                          sty.productVariantPicker
                        )}
                      />
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__kvvA1)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qNu8X
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tWggt
                          )}
                        >
                          {"Quantity"}
                        </div>

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lDKk
                          )}
                        >
                          <ProductQuantity
                            data-plasmic-name={"productQuantity"}
                            data-plasmic-override={overrides.productQuantity}
                            className={classNames(
                              "__wab_instance",
                              sty.productQuantity
                            )}
                          >
                            <TextInput
                              data-plasmic-name={"textInput"}
                              data-plasmic-override={overrides.textInput}
                              className={classNames(
                                "__wab_instance",
                                sty.textInput
                              )}
                            />
                          </ProductQuantity>

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__so9Mw
                            )}
                          />

                          <Button
                            data-plasmic-name={"likeButton"}
                            data-plasmic-override={overrides.likeButton}
                            colors={"lightGrayOutline" as const}
                            iconOnly={true}
                            size={"large" as const}
                            startIcon={
                              <LikeIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__mKee0
                                )}
                                role={"img"}
                              />
                            }
                          />

                          <AddToCartButton
                            className={classNames(
                              "__wab_instance",
                              sty.addToCartButton__xjQyc
                            )}
                          >
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__jPrK
                              )}
                              colors={"black" as const}
                              rounded={true}
                              size={"large" as const}
                            >
                              {"Add to cart"}
                            </Button>
                          </AddToCartButton>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>

                    <Separator
                      data-plasmic-name={"separator"}
                      data-plasmic-override={overrides.separator}
                      className={classNames("__wab_instance", sty.separator)}
                    />

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__i0EOu)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tD7Ev
                        )}
                      >
                        {"Description"}
                      </div>
                    </p.Stack>

                    <ProductTextField
                      className={classNames(
                        "__wab_instance",
                        sty.productTextField__e8ApR
                      )}
                      field={"description" as const}
                    />
                  </p.Stack>
                </div>
              </p.Stack>
            </section>
          </ProductBox>

          <section className={classNames(projectcss.all, sty.section___5Bl0J)}>
            <div
              data-plasmic-name={"container42"}
              data-plasmic-override={overrides.container42}
              className={classNames(projectcss.all, sty.container42)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zRpmi)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__v8P4A
                      )}
                    >
                      {"You may also like"}
                    </div>

                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button___7IlDd
                      )}
                      colors={"link" as const}
                      endIcon={
                        <RightArrowIcon
                          className={classNames(projectcss.all, sty.svg__iLyP8)}
                          role={"img"}
                        />
                      }
                      showEndIcon={true}
                    >
                      {"See more"}
                    </Button>
                  </div>
                ),

                value: args.container42
              })}
            </div>

            <div
              data-plasmic-name={"container5"}
              data-plasmic-override={overrides.container5}
              className={classNames(projectcss.all, sty.container5)}
            >
              <ProductCollection
                data-plasmic-name={"productCollection"}
                data-plasmic-override={overrides.productCollection}
                category={"626c0a6465d64c00122ec197" as const}
                className={classNames("__wab_instance", sty.productCollection)}
                emptyMessage={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__toCcM
                    )}
                  >
                    {"No product found!"}
                  </div>
                }
                loadingMessage={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__a9Ur
                    )}
                  >
                    {"Loading..."}
                  </div>
                }
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nOf9)}
                  >
                    <ProductCard
                      data-plasmic-name={"productCard"}
                      data-plasmic-override={overrides.productCard}
                      className={classNames("__wab_instance", sty.productCard)}
                    />
                  </div>
                ) : null}
              </ProductCollection>
            </div>
          </section>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBar",
    "container432",
    "productBox",
    "columns",
    "productMedia",
    "productMediaCollection",
    "productPrice",
    "productVariantPicker",
    "productQuantity",
    "textInput",
    "textbox",
    "likeButton",
    "separator",
    "container42",
    "container5",
    "productCollection",
    "productCard",
    "footer"
  ],
  navBar: ["navBar"],
  container432: ["container432"],
  productBox: [
    "productBox",
    "columns",
    "productMedia",
    "productMediaCollection",
    "productPrice",
    "productVariantPicker",
    "productQuantity",
    "textInput",
    "textbox",
    "likeButton",
    "separator"
  ],
  columns: [
    "columns",
    "productMedia",
    "productMediaCollection",
    "productPrice",
    "productVariantPicker",
    "productQuantity",
    "textInput",
    "textbox",
    "likeButton",
    "separator"
  ],
  productMedia: ["productMedia"],
  productMediaCollection: ["productMediaCollection"],
  productPrice: ["productPrice"],
  productVariantPicker: ["productVariantPicker"],
  productQuantity: ["productQuantity", "textInput", "textbox"],
  textInput: ["textInput", "textbox"],
  likeButton: ["likeButton"],
  separator: ["separator"],
  container42: ["container42"],
  container5: ["container5", "productCollection", "productCard"],
  productCollection: ["productCollection", "productCard"],
  productCard: ["productCard"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBar: typeof NavBar;
  container432: "div";
  productBox: typeof ProductBox;
  columns: "div";
  productMedia: typeof ProductMedia;
  productMediaCollection: typeof ProductMediaCollection;
  productPrice: typeof ProductPriceComponent;
  productVariantPicker: typeof ProductVariantPicker;
  productQuantity: typeof ProductQuantity;
  textInput: typeof TextInput;
  likeButton: typeof Button;
  separator: typeof Separator;
  container42: "div";
  container5: "div";
  productCollection: typeof ProductCollection;
  productCard: typeof ProductCard;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicItem__VariantsArgs;
    args?: PlasmicItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicItem__ArgProps,
      internalVariantPropNames: PlasmicItem__VariantProps
    });

    return PlasmicItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicItem";
  } else {
    func.displayName = `PlasmicItem.${nodeName}`;
  }
  return func;
}

export const PlasmicItem = Object.assign(
  // Top-level PlasmicItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    container432: makeNodeComponent("container432"),
    productBox: makeNodeComponent("productBox"),
    columns: makeNodeComponent("columns"),
    productMedia: makeNodeComponent("productMedia"),
    productMediaCollection: makeNodeComponent("productMediaCollection"),
    productPrice: makeNodeComponent("productPrice"),
    productVariantPicker: makeNodeComponent("productVariantPicker"),
    productQuantity: makeNodeComponent("productQuantity"),
    textInput: makeNodeComponent("textInput"),
    likeButton: makeNodeComponent("likeButton"),
    separator: makeNodeComponent("separator"),
    container42: makeNodeComponent("container42"),
    container5: makeNodeComponent("container5"),
    productCollection: makeNodeComponent("productCollection"),
    productCard: makeNodeComponent("productCard"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicItem
    internalVariantProps: PlasmicItem__VariantProps,
    internalArgProps: PlasmicItem__ArgProps
  }
);

export default PlasmicItem;
/* prettier-ignore-end */
